{"version":3,"sources":["../../../../src/v1/models/novel/index.js"],"names":["novelModel","create","findWithoutPagination","findByIdOrFindAll","remove","update","dUri","NovelSchema","Schema","name","type","String","require","unique","description","required","author","translation_team","cover_url","date_start","Date","date_end","users","SchemaTypes","ObjectId","ref","created_at","default","now","model","Novel","createNovel","data","save","then","result","catch","err","Object","message","status","payload","updateNovel","novelId","Types","findOneAndUpdate","_id","$set","new","Error","image","format","extname","originalname","toString","buffer","uploader","upload","content","novelWithImage","secure_url","find","code","currentPage","findById","perPage","page","aggregate","$lookup","from","localField","foreignField","as","$unwind","$sort","$project","chapters","number","title","skip","limit","count","novels","pages","Math","ceil","contResult","exec"],"mappings":"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","file":"index.js","sourcesContent":["import Datauri from 'datauri'\nimport path from 'path'\nimport { serviceCloudinary } from './../../utils/upload'\nimport mongoose from './../../config/db'\nimport {\n  CREATE_NOVEL_FAILED,\n  REMOVE_NOVEL_FAILED,\n  UPDATE_NOVEL_FAILED,\n} from './../../config/messages'\n\nconst dUri = new Datauri()\n\nconst NovelSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    require: true,\n    unique: true,\n  },\n  description: {\n    type: String,\n    required: true,\n  },\n  author: {\n    type: String,\n    required: true,\n  },\n  translation_team: {\n    type: String,\n    required: true,\n  },\n  cover_url: {\n    type: String,\n    require: true,\n  },\n  date_start: {\n    type: Date,\n  },\n  date_end: {\n    type: Date,\n  },\n  users: {\n    type: [mongoose.SchemaTypes.ObjectId],\n    ref: 'User',\n  },\n  created_at: {\n    type: Date,\n    default: Date.now,\n  },\n})\n\nexport function novelModel() {\n  return mongoose.model('Novel', NovelSchema)\n}\n\nconst Novel = novelModel()\n\nfunction createNovel(data) {\n  return new Novel(data)\n    .save()\n    .then(result => result)\n    .catch((err) => {\n      throw Object({\n        message: CREATE_NOVEL_FAILED,\n        status: 422,\n        payload: err.name,\n      })\n    })\n}\n\nfunction updateNovel(data, novelId) {\n  const { ObjectId } = mongoose.Types\n  return Novel.findOneAndUpdate(\n    { _id: ObjectId(novelId) },\n    { $set: data },\n    { new: true },\n  )\n    .then(payload => payload)\n    .catch((err) => {\n      throw new Error({\n        message: UPDATE_NOVEL_FAILED,\n        status: 422,\n        payload: err,\n      })\n    })\n}\n\nexport function create(data, image) {\n  if (image) {\n    dUri.format(path.extname(image.originalname).toString(), image.buffer)\n    return serviceCloudinary.uploader.upload(dUri.content)\n      .then((result) => {\n        const novelWithImage = data\n        novelWithImage.cover_url = result.secure_url\n        return createNovel(novelWithImage)\n      })\n      .catch((err) => {\n        if (err) {\n          throw Object({\n            message: CREATE_NOVEL_FAILED,\n            status: 422,\n            payload: err.name,\n          })\n        }\n      })\n  }\n  return createNovel(data)\n}\n\nexport function findWithoutPagination() {\n  return Novel.find({})\n    .then(payload => payload)\n    .catch((err) => {\n      throw new Error({\n        payload: err,\n        code: 500,\n      })\n    })\n}\n\nexport function findByIdOrFindAll(novelId, currentPage) {\n  if (novelId) {\n    const { ObjectId } = mongoose.Types\n    return Novel.findById(ObjectId(novelId))\n      .then(result => result)\n      .catch((err) => {\n        throw new Error({\n          payload: err,\n          code: 500,\n        })\n      })\n  }\n  const perPage = 20\n  const page = currentPage || 1\n\n  return Novel.aggregate([\n    {\n      $lookup: {\n        from: 'chapters',\n        localField: '_id',\n        foreignField: 'novel',\n        as: 'chapters',\n      },\n    },\n    { $unwind: '$chapters' },\n    { $sort: { 'chapters.number': -1 } },\n    {\n      $project: {\n        name: 1,\n        cover_url: 1,\n        translation_team: 1,\n        author: 1,\n        chapters: {\n          number: 1,\n          title: 1,\n          created_at: 1,\n        },\n      },\n    },\n  ])\n    .skip((perPage * page) - perPage)\n    .limit(perPage)\n    .then(result => (\n      Novel\n        .count()\n        .then(contResult => ({\n          novels: result,\n          currentPage: page,\n          pages: Math.ceil(contResult / perPage),\n        }))\n        .catch((err) => {\n          throw new Error({\n            payload: err,\n            code: 500,\n          })\n        })\n    ))\n    .catch((err) => {\n      throw new Error({\n        payload: err,\n        code: 500,\n      })\n    })\n}\n\nexport function remove(novelId) {\n  const { ObjectId } = mongoose.Types\n\n  return Novel.remove({ _id: ObjectId(novelId) })\n    .exec()\n    .then(payload => payload)\n    .catch((err) => {\n      throw Object({\n        message: REMOVE_NOVEL_FAILED,\n        status: 422,\n        payload: err,\n      })\n    })\n}\n\nexport function update(data, novelId, image) {\n  if (image) {\n    dUri.format(path.extname(image.originalname).toString(), image.buffer)\n    return serviceCloudinary.uploader.upload(dUri.content)\n      .then((result) => {\n        const novelWithImage = data\n        novelWithImage.cover_url = result.secure_url\n        return updateNovel(novelWithImage, novelId)\n      })\n      .catch((err) => {\n        if (err) {\n          throw Object({\n            message: UPDATE_NOVEL_FAILED,\n            status: 422,\n            payload: err.name,\n          })\n        }\n      })\n  }\n  return updateNovel(data, novelId)\n}\n"]}