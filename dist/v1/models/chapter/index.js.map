{"version":3,"sources":["../../../../src/v1/models/chapter/index.js"],"names":["chapterModel","create","findByIdOrFindAll","findByChapterId","findByNovel","remove","update","ChapterSchema","Schema","number","type","Number","require","title","String","required","translators","revisors","content","novel","SchemaTypes","ObjectId","ref","created_at","Date","default","now","model","Chapter","data","save","then","result","catch","err","Object","message","status","payload","chapterId","currentPage","Types","findById","Error","code","perPage","page","find","skip","limit","count","chapters","pages","Math","ceil","contResult","novelId","_id","exec","body","findOneAndUpdate","$set","new"],"mappings":"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","file":"index.js","sourcesContent":["import mongoose from './../../config/db'\n\nimport {\n  CREATE_CHAPTER_FAILED,\n  REMOVE_CHAPTER_FAILED,\n  UPDATE_CHAPTER_FAILED,\n} from './../../config/messages'\n\nconst ChapterSchema = new mongoose.Schema({\n  number: {\n    type: Number,\n    require: true,\n  },\n  title: {\n    type: String,\n    required: true,\n  },\n  translators: {\n    type: String,\n    required: true,\n  },\n  revisors: {\n    type: String,\n    required: true,\n  },\n  content: {\n    type: String,\n    require: true,\n  },\n  novel: {\n    type: mongoose.SchemaTypes.ObjectId,\n    ref: 'Novel',\n  },\n  created_at: {\n    type: Date,\n    default: Date.now,\n  },\n})\n\nexport function chapterModel() {\n  return mongoose.model('Chapter', ChapterSchema)\n}\n\nconst Chapter = chapterModel()\n\nexport function create(data) {\n  return new Chapter(data)\n    .save()\n    .then(result => result)\n    .catch((err) => {\n      throw Object({ message: CREATE_CHAPTER_FAILED, status: 422, payload: err })\n    })\n}\n\nexport function findByIdOrFindAll(chapterId, currentPage) {\n  if (chapterId) {\n    const { ObjectId } = mongoose.Types\n    return Chapter.findById(ObjectId(chapterId))\n      .then(result => result)\n      .catch((err) => {\n        throw new Error({ payload: err, code: 500 })\n      })\n  }\n  const perPage = 2\n  const page = currentPage || 1\n\n  return Chapter.find({})\n    .skip((perPage * page) - perPage)\n    .limit(perPage)\n    .then(result => (\n      Chapter\n        .count()\n        .then(contResult => ({\n          chapters: result,\n          currentPage: page,\n          pages: Math.ceil(contResult / perPage),\n        }))\n        .catch((err) => {\n          throw new Error({ payload: err, code: 500 })\n        })\n    ))\n    .catch((err) => {\n      throw new Error({ payload: err, code: 500 })\n    })\n}\n\nexport function findByChapterId(chapterId) {\n  const { ObjectId } = mongoose.Types\n  return Chapter.findById(ObjectId(chapterId))\n    .then(result => result)\n    .catch((err) => {\n      throw new Error({ payload: err, code: 500 })\n    })\n}\n\nexport function findByNovel(novelId, currentPage) {\n  const perPage = 10\n  const page = currentPage || 1\n  const { ObjectId } = mongoose.Types\n\n  return Chapter.find({ novel: ObjectId(novelId) })\n    .skip((perPage * page) - perPage)\n    .limit(perPage)\n    .then(result => (\n      Chapter\n        .count()\n        .then(contResult => ({\n          chapters: result,\n          currentPage: page,\n          pages: Math.ceil(contResult / perPage),\n        }))\n        .catch((err) => {\n          throw new Error({ payload: err, code: 500 })\n        })\n    ))\n    .catch((err) => {\n      throw new Error({ payload: err, code: 500 })\n    })\n}\n\nexport function remove(chapterId) {\n  const { ObjectId } = mongoose.Types\n\n  return Chapter.remove({ _id: ObjectId(chapterId) })\n    .exec()\n    .then(payload => payload)\n    .catch((err) => {\n      throw Object({ message: REMOVE_CHAPTER_FAILED, status: 422, payload: err })\n    })\n}\n\nexport function update(body, chapterId) {\n  const { ObjectId } = mongoose.Types\n\n  return Chapter.findOneAndUpdate(\n    { _id: ObjectId(chapterId) },\n    { $set: body },\n    { new: true },\n  )\n    .then(payload => payload)\n    .catch((err) => {\n      throw new Error({\n        message: UPDATE_CHAPTER_FAILED,\n        status: 422,\n        payload: err,\n      })\n    })\n}\n"]}