{"version":3,"sources":["../../../../src/v1/models/user/index.js"],"names":["userModel","getUserById","register","login","update","messages","AdminSchema","Schema","name","type","String","unique","required","email","password","enum","default","avatar","facebook","twitter","userStatus","strict","timestamps","createdAt","updatedAt","pre","next","done","then","catch","e","err","preSave","model","User","userId","ObjectId","Types","findById","result","Error","payload","code","data","save","user","toObject","undefined","authorization","findOne","toString","validatePassword","Object","status","message","LOGIN_FAILED","body","findOneAndUpdate","_id","$set","new","UPDATE_USER_FAILED"],"mappings":"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","file":"index.js","sourcesContent":["import mongoose from './../../config/db'\nimport { compare, hash } from './../../config/crypto'\nimport { encode } from './../../config/jwt'\n\nimport * as messages from './../../config/messages'\n\nconst AdminSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    type: {\n      type: String,\n      enum: ['ADIM', 'PUBLISHER', 'USER'],\n      default: 'USER',\n    },\n    avatar: String,\n    facebook: String,\n    twitter: String,\n    userStatus: {\n      type: String,\n      enum: ['PENDING', 'REQUESTED', 'ACCEPTED', 'DENIED', 'BLOCKED'],\n      default: 'PENDING',\n    },\n  },\n  {\n    strict: true,\n    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },\n  },\n)\n\nAdminSchema.pre('save', true, async function preSave(next, done) {\n  try {\n    if (this.password) {\n      hash(this.password)\n        .then((password) => {\n          this.password = password\n          done()\n        })\n        .catch(e => done(e))\n    }\n    next()\n  } catch (err) {\n    next(err)\n  }\n})\n\nexport function userModel() {\n  return mongoose.model('User', AdminSchema)\n}\n\nconst User = userModel()\n\nexport function getUserById(userId) {\n  const { ObjectId } = mongoose.Types\n\n  return User.findById(ObjectId(userId))\n    .then(result => result)\n    .catch((err) => {\n      throw new Error({ payload: err, code: 500 })\n    })\n}\n\nexport function register(data) {\n  return new User({ ...data, userStatus: 'PENDING' })\n    .save()\n    .then((payload) => {\n      const user = payload.toObject()\n      user.password = undefined\n\n      return { ...user, authorization: `Bearer ${encode(user)}` }\n    })\n    .catch((err) => { throw err })\n}\n\nexport function login(email, password) {\n  return User\n    .findOne({ email })\n    .then(async (user) => {\n      const validatePassword = await compare(password.toString(), user.password.toString())\n\n      if (user && validatePassword) {\n        const result = user.toObject()\n        result.password = undefined\n\n        return { ...result, authorization: `Bearer ${encode(result)}` }\n      }\n      throw Object({ status: 500, payload: {} })\n    })\n    .catch((err) => {\n      throw Object({ message: messages.LOGIN_FAILED, status: 422, payload: err })\n    })\n}\n\nexport function update(body, userId) {\n  const { ObjectId } = mongoose.Types\n\n  return User.findOneAndUpdate({ _id: ObjectId(userId) }, { $set: body }, { new: true })\n    .then(payload => payload)\n    .catch((err) => {\n      throw new Error({ message: messages.UPDATE_USER_FAILED, status: 422, payload: err })\n    })\n}\n"]}