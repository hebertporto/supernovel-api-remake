{"version":3,"sources":["../../../../../src/v1/services/admin/chapter/index.js"],"names":["router","Router","post","res","next","body","then","status","json","payload","catch","error","get","params","chapterId","query","novelId","currentPage","delete","put"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AAEA;;;;AAQA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,6DAAjB,EAAgD,gBAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAAA,MAAtBC,IAAsB,QAAtBA,IAAsB;;AACvE,uBAAOA,IAAP,EACGC,IADH,CACQ;AAAA,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASN,KAAKO,KAAL,CAAT;AAAA,GAFT;AAGD,CAJD;;AAMAX,OAAOY,GAAP,CAAW,cAAX,EAA2B,iBAAaT,GAAb,EAAkBC,IAAlB,EAA2B;AAAA,MAAxBS,MAAwB,SAAxBA,MAAwB;AAAA,MAC5CC,SAD4C,GAC9BD,MAD8B,CAC5CC,SAD4C;;AAEpD,kCAAkBA,SAAlB,EACGR,IADH,CACQ;AAAA,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASN,KAAKO,KAAL,CAAT;AAAA,GAFT;AAGD,CALD;;AAOAX,OAAOY,GAAP,CAAW,mBAAX,EAAgC,iBAAoBT,GAApB,EAAyBC,IAAzB,EAAkC;AAAA,MAA/BS,MAA+B,SAA/BA,MAA+B;AAAA,MAAvBE,KAAuB,SAAvBA,KAAuB;AAAA,MACxDC,OADwD,GAC5CH,MAD4C,CACxDG,OADwD;AAAA,MAExDC,WAFwD,GAExCF,KAFwC,CAExDE,WAFwD;;AAGhE,4BAAYD,OAAZ,EAAqBC,WAArB,EACGX,IADH,CACQ;AAAA,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASN,KAAKO,KAAL,CAAT;AAAA,GAFT;AAGD,CAND;;AAQAX,OAAOkB,MAAP,CAAc,aAAd,EAA6B,iBAAaf,GAAb,EAAkBC,IAAlB,EAA2B;AAAA,MAAxBS,MAAwB,SAAxBA,MAAwB;AAAA,MAC9CC,SAD8C,GAChCD,MADgC,CAC9CC,SAD8C;;AAEtD,uBAAOA,SAAP,EACGR,IADH,CACQ;AAAA,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASN,KAAKO,KAAL,CAAT;AAAA,GAFT;AAGD,CALD;;AAOAX,OAAOmB,GAAP,CAAW,aAAX,EAA0B,iBAAmBhB,GAAnB,EAAwBC,IAAxB,EAAiC;AAAA,MAA9BC,IAA8B,SAA9BA,IAA8B;AAAA,MAAxBQ,MAAwB,SAAxBA,MAAwB;AAAA,MACjDC,SADiD,GACnCD,MADmC,CACjDC,SADiD;;;AAGzD,uBAAOT,IAAP,EAAaS,SAAb,EACGR,IADH,CACQ;AAAA,WAAWH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASN,KAAKO,KAAL,CAAT;AAAA,GAFT;AAGD,CAND;;kBAQeX,M","file":"index.js","sourcesContent":["import express from 'express'\nimport validate from 'express-validation'\n\nimport { createChapterSchema } from './schema'\n\nimport {\n  create,\n  findByIdOrFindAll,\n  remove,\n  update,\n  findByNovel,\n} from './../../../models/chapter'\n\nconst router = express.Router()\n\nrouter.post('/', validate(createChapterSchema), ({ body }, res, next) => {\n  create(body)\n    .then(payload => res.status(201).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.get('/:chapterId?', ({ params }, res, next) => {\n  const { chapterId } = params\n  findByIdOrFindAll(chapterId)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.get('/byNovel/:novelId', ({ params, query }, res, next) => {\n  const { novelId } = params\n  const { currentPage } = query\n  findByNovel(novelId, currentPage)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.delete('/:chapterId', ({ params }, res, next) => {\n  const { chapterId } = params\n  remove(chapterId)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.put('/:chapterId', ({ body, params }, res, next) => {\n  const { chapterId } = params\n\n  update(body, chapterId)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nexport default router\n"]}