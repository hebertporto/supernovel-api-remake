{"version":3,"sources":["../../../../src/v1/services/app/index.js"],"names":["router","Router","get","req","res","next","then","status","json","payload","catch","error","params","query","novelId","currentPage","chapterId"],"mappings":";;;;;;AAAA;;;;AAEA;;AACA;;AACA;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,GAAP,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/C,gCACGC,IADH,CACQ;AAAA,WAAWF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASL,KAAKM,KAAL,CAAT;AAAA,GAFT;AAGD,CAJD;;AAMAX,OAAOE,GAAP,CAAW,mBAAX,EAAgC,gBAAoBE,GAApB,EAAyBC,IAAzB,EAAkC;AAAA,MAA/BO,MAA+B,QAA/BA,MAA+B;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MACxDC,OADwD,GAC5CF,MAD4C,CACxDE,OADwD;AAAA,MAExDC,WAFwD,GAExCF,KAFwC,CAExDE,WAFwD;;AAGhE,gCAAkBD,OAAlB,EAA2BC,WAA3B,EACGT,IADH,CACQ;AAAA,WAAWF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASL,KAAKM,KAAL,CAAT;AAAA,GAFT;AAGD,CAND;AAOA;AACAX,OAAOE,GAAP,CAAW,4BAAX,EAAyC,iBAAaE,GAAb,EAAkBC,IAAlB,EAA2B;AAAA,MAAxBO,MAAwB,SAAxBA,MAAwB;AAAA,MAC1DE,OAD0D,GAC9CF,MAD8C,CAC1DE,OAD0D;;AAElE,4BAAYA,OAAZ,EACGR,IADH,CACQ;AAAA,WAAWF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASL,KAAKM,KAAL,CAAT;AAAA,GAFT;AAGD,CALD;;AAOAX,OAAOE,GAAP,CAAW,sBAAX,EAAmC,iBAAaE,GAAb,EAAkBC,IAAlB,EAA2B;AAAA,MAAxBO,MAAwB,SAAxBA,MAAwB;AAAA,MACpDI,SADoD,GACtCJ,MADsC,CACpDI,SADoD;;AAE5D,gCAAgBA,SAAhB,EACGV,IADH,CACQ;AAAA,WAAWF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB,CAAX;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAASL,KAAKM,KAAL,CAAT;AAAA,GAFT;AAGD,CALD;;kBAOeX,M","file":"index.js","sourcesContent":["import express from 'express'\n\nimport { findByIdOrFindAll } from './../../models/novel'\nimport { findAllActive } from './../../models/feature'\nimport { findByNovel, findByChapterId } from './../../models/chapter'\n\nconst router = express.Router()\n\nrouter.get('/featureNovels', (req, res, next) => {\n  findAllActive()\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.get('/novels/:novelId?', ({ params, query }, res, next) => {\n  const { novelId } = params\n  const { currentPage } = query\n  findByIdOrFindAll(novelId, currentPage)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n// TODO - get last chaptar - by number  //\nrouter.get('/chapters/byNovel/:novelId', ({ params }, res, next) => {\n  const { novelId } = params\n  findByNovel(novelId)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nrouter.get('/chapters/:chapterId', ({ params }, res, next) => {\n  const { chapterId } = params\n  findByChapterId(chapterId)\n    .then(payload => res.status(200).json(payload))\n    .catch(error => next(error))\n})\n\nexport default router\n"]}