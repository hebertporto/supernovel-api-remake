{"version":3,"sources":["../src/app.js"],"names":["handlers","port","process","env","PORT","app","unless","path","url","dateOfBirth","Date","format","use","urlencoded","extended","limit","json","req","res","status","version","validationError","internalError","listen","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;IAAYA,Q;;AAGZ;;AAEA;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALA;;AAOA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,MAAM,wBAAZ;;AAEA,IAAMC,SAAS;AACbC,QAAM,CACJ,EAAEC,KAAK,mCAAP,EADI,EAEJ,EAAEA,KAAK,gCAAP,EAFI,EAGJ,EAAEA,KAAK,mBAAP,EAHI;AADO,CAAf;;AAQA,IAAMC,cAAc,sBAAO,IAAIC,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,yBAA1B,CAApB;;AAEAN,IAAIO,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB;AAC5BC,YAAU,IADkB;AAE5BC;AAF4B,CAAtB,CAAR;;AAKAV,IAAIO,GAAJ,CAAQ,qBAAWI,IAAX,CAAgB,EAAED,0CAAF,EAAhB,CAAR;AACAV,IAAIO,GAAJ,CAAQ,qBAAR;AACAP,IAAIO,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAP,IAAIO,GAAJ,CAAQ,GAAR,EAAa,UAACK,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,GAAX,CAAd;AAAA,CAAb;AACAd,IAAIO,GAAJ,CAAQ,SAAR,EAAmB,UAACK,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,gBAAF,EAAWX,wBAAX,EAArB,CAAd;AAAA,CAAnB;;AAEAJ,IAAIO,GAAJ,CAAQ,eAAUN,MAAV,CAAiBA,MAAjB,CAAR;AACAD,IAAIO,GAAJ,CAAQ,iBAAYN,MAAZ,CAAmBA,MAAnB,CAAR;;AAEA;AACAD,IAAIO,GAAJ,CAAQ,aAAR;AACA;AACAP,IAAIO,GAAJ,CAAQ,oBAAR;AACAP,IAAIO,GAAJ,CAAQ,oBAAR;AACAP,IAAIO,GAAJ,CAAQ,qBAAR;AACAP,IAAIO,GAAJ,CAAQ,uBAAR;AACAP,IAAIO,GAAJ,CAAQ,wBAAR;;AAEA;AACAP,IAAIO,GAAJ,CAAQZ,SAASqB,eAAjB;AACAhB,IAAIO,GAAJ,CAAQZ,SAASsB,aAAjB;;AAEAjB,IAAIkB,MAAJ,CAAWtB,IAAX,EAAiB,YAAM;AACrBuB,UAAQC,GAAR,0BAAmCxB,IAAnC;AACD,CAFD;;kBAIeI,G","file":"app.js","sourcesContent":["import cors from 'cors'\nimport morgan from 'morgan'\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport moment from 'moment'\n\nimport './v1/config/db'\n\nimport * as handlers from './v1/utils/handlers'\n\nimport { version } from '../package.json'\nimport { DEFAULT_FILE_UPLOAD_SIZE } from './v1/config/constants'\n\nimport { decodeJWT, hydrateUser } from './v1/config/jwt'\n\nimport apiApp from './v1/services/app'\n// Admin //\nimport novelAdmin from './v1/services/admin/novel'\nimport chapterAdmin from './v1/services/admin/chapter'\nimport featureAdmin from './v1/services/admin/feature'\nimport userAdmin from './v1/services/admin/user'\nimport authAdmin from './v1/services/admin/authentication'\n\nconst port = process.env.PORT || 3000\nconst app = express()\n\nconst unless = {\n  path: [\n    { url: /^\\/v1\\/api\\/admin\\/auth\\/register/ },\n    { url: /^\\/v1\\/api\\/admin\\/auth\\/login/ },\n    { url: /^\\/v1\\/api\\/app\\// },\n  ],\n}\n\nconst dateOfBirth = moment(new Date()).format('MMMM Do YYYY, h:mm:ss a')\n\napp.use(bodyParser.urlencoded({\n  extended: true,\n  limit: DEFAULT_FILE_UPLOAD_SIZE,\n}))\n\napp.use(bodyParser.json({ limit: DEFAULT_FILE_UPLOAD_SIZE }))\napp.use(cors())\napp.use(morgan('dev'))\n\n// Routes //\napp.use('/', (req, res) => res.status(200))\napp.use('/health', (req, res) => res.status(200).json({ version, dateOfBirth }))\n\napp.use(decodeJWT.unless(unless))\napp.use(hydrateUser.unless(unless))\n\n// APP\napp.use('/v1/api/app', apiApp)\n// ADMIN\napp.use('/v1/api/admin/user', userAdmin)\napp.use('/v1/api/admin/auth', authAdmin)\napp.use('/v1/api/admin/novel', novelAdmin)\napp.use('/v1/api/admin/chapter', chapterAdmin)\napp.use('/v1/api/admin/featured', featureAdmin)\n\n// Error Handlers\napp.use(handlers.validationError)\napp.use(handlers.internalError)\n\napp.listen(port, () => {\n  console.log(`API Server on port: ${port}`)\n})\n\nexport default app\n"]}